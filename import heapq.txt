import heapq

def dijkstra(graph, start):
    distances = {vertex: float('inf') for vertex in graph}
    distances[start] = 0
    heap = [(0, start)]

    while heap:
        current_distance, current_vertex = heapq.heappop(heap)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(heap, (distance, neighbor))

    return distances

graph = {
    'A': {'B': 5, 'C': 2},
    'B': {'A': 5, 'D': 1, 'E': 3},
    'C': {'A': 2, 'F': 4},
    'D': {'B': 1, 'E': 1},
    'E': {'B': 3, 'D': 1, 'F': 7},
    'F': {'C': 4, 'E': 7}
}

start_vertex = 'A'
distances = dijkstra(graph, start_vertex)

print("Shortest distances from vertex", start_vertex + ":")
for vertex, distance in distances.items():
    print("To", vertex + ":", distance)
